RUT_USER=
RUT_PASSWD=

# 测试网络和IO性能
wget -O speedtest https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
chmod +x speedtest
./speedtest
wget -qO- bench.sh | bash

# 登录信息在用户面板的Software中。更改默认SSH密码：
passwd
# 包括安装软件在内的操作只能针对用户文件夹中进行，没有sudo权限，当然更没有root密码
# 在面板中安装deluge，并查看其默认监视文件夹为 /media/md3/xxx/private/deluge/watch/
# 在面板中安装rtorrent以后再手动覆盖安装最新版rutorrent，脚本为官方提供：
cd ~/www/$(whoami).$(hostname -f)/public_html/
git clone https://github.com/Novik/ruTorrent.git
cp -r rutorrent/conf/* ruTorrent/conf/
cp rutorrent/.ht* ruTorrent/
rm -rf rutorrent/ && mv ruTorrent/ rutorrent/
# 更改默认rutorrent登录密码
htpasswd -b `find ~ -name .htpasswd` $RUT_USER $RUT_PASSWD
# 安装autodl-irssi插件，包括底层软件和rutorrent的GUI按钮
wget -qO ~/install.autodl.sh https://bitbucket.org/feralio/wiki/raw/HEAD/src/wiki/software/autodl/autodl.sh && bash ~/install.autodl.sh
# 恢复autodl-irssi的配置

# 饭盒SSD容量小，将已经完成的文件复制到另一台机器上
# 以上传方式为例，在A机器上操作，将文件上传到B机器上
# A为LOCAL，B为DEST
LOCAL_DATA=/media/md3/xxx/private/deluge/data
LOCAL_TORR=/media/md3/xxx/private/deluge/torrents
DEST_USER=
DEST_HOST=
DEST_DIR=''

# 使shell将文件名的空格字符当作普通字符
IFS=$'\n'

count=0
for i in `ls -atr $LOCAL_DATA`;
do 
echo "$i"
# scp -r -p -l $[55*1024*8] "$LOCAL_DATA/$i" jack@$DEST_HOST:~/GGN/
rsync -av --progress -e ssh ''"$LOCAL_DATA/$i"'' $DEST_USER@$DEST_HOST:$DEST_DIR
count=$[ $count+1 ]
if [[ $count -eq 10 ]]; then
  break
fi
done

# scp的参数
# -p, 保持子文件夹和文件的修改时间
# -l, 限速传输，单位为kbits/s
# scp不能增量传输，即使远方已经存在文件，仍然会传输一遍；rsync可以增量传输（据说是在二进制级别）

# rsync的参数：
-v, --verbose 详细模式输出。
-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD 
-r, --recursive 对子目录以递归模式处理。
-t, --times 保持文件时间信息。
-p, --perms 保持文件权限。

# 解决每个传输命令都需要输入密码的问题
# 在A机器上操作：
# 生成密钥对
ssh-keygen -t rsa
# 发送公钥给B机器
scp .ssh/id_rsa.pub $DEST_USER@$DEST_HOST:~
# 在B机器上操作：
mkdir -p ~/.ssh/
touch ~/.ssh/authorized_keys
cat ~/id_rsa.pub >> ~/.ssh/authorized_keys 
